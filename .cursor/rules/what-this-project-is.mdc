---
description: 
globs: 
alwaysApply: true
---
so, this is an ai agentic search engine i am trying to create. so there is a frontend folder and backend folder. to start frontend, i am using npm start and in the backend, i first go to the virtual env by the command .venv\Scripts\Activate.ps1 then i run python run.py yeah the [run.py](mdc:backend/run.py). So, it works similar to how the perplexity search engine works. so initially in the [Home.tsx](mdc:frontend/src/pages/Home.tsx) , before any search, the user sees a ui where the is an input and the user enters a search query, then it gets send [SearchContext.tsx](mdc:frontend/src/context/SearchContext.tsx) to the backend [run.py](mdc:backend/run.py) , [main.py](mdc:backend/src/main.py) ...so, the ai searches the web [search_agent.py](mdc:backend/src/agents/search_agent.py) , [search_tools.py](mdc:backend/src/util/search_tools.py) . and brings the answer [SearchContext.tsx](mdc:frontend/src/context/SearchContext.tsx) . so at this time, there will be the query tha answer, images and sources, and there will be a followupsearch [FollowUpSearch.tsx](mdc:frontend/src/components/search/FollowUpSearch.tsx) which the user can use to continue the conversation with the ai, and the ai will be searching the web and bringing the answer, you know, just like perplexity search ai. other files [package.json](mdc:frontend/package.json), [ResultPreview.tsx](mdc:frontend/src/components/search/ResultPreview.tsx), and others. the code/system should always be efficent and super fast, highly performant and reliable. the code and file structure structure should be so like that of experts and organised in a very great way.

